using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Circuit_Layout
{
    /// <summary>
    /// Логика взаимодействия для CircuitLayoutControl.xaml
    /// </summary>
    public partial class ExperimentDataTable : UserControl
    {
        public ExperimentDataTable()
        {
            InitializeComponent();

            ExperimentTableData[] ExpData = new ExperimentTableData[5];
            for ( int i = 0; i < ExpData.Length; i++ )
            {
                ExpData[i].SetNumber( i + 1 );
            }

            dgData.ItemsSource = ExpData;
        }
        public ExperimentTableData[] GetData()
        {
            return dgData.Items.SourceCollection.Cast<ExperimentTableData>().ToArray();
        }
        private void dgData_AutoGeneratedColumns( object sender, EventArgs e )
        {
            var tt = dgData.Columns;
            tt[0].Header = "№";
            tt[0].Width = 40;

            tt[1].Header = ParseToStackPanel( "l|1_, m|" );

            tt[2].Header = ParseToStackPanel( "l|2_, m|" );

            tt[3].Header = "R, Ω";

            tt[4].Header = ParseToStackPanel( "R|x,l_, Ω|" );

            tt[5].Header = ParseToStackPanel( "(R|x,l_-<R|x,l_>), Ω|" );
            tt[5].Width = 100;

            tt[6].Header = ParseToStackPanel( "(R|x,l_-<R|x,l_>)|2^, Ω|2^" );
            tt[6].Width = 130;
        }
        public StackPanel ParseToStackPanel( string ParseString )
        {
            StackPanel stp = new StackPanel() { Orientation = Orientation.Horizontal };
            string tmp = "";
            foreach ( char ch in ParseString )
            {
                if ( ch == '_' || ch == '^' || ch == '|' )
                {
                    stp.Children.Add( new TextBlock()
                    {
                        Text = tmp,
                        Margin = new Thickness( ch == '|' ? 0 : 1, 0, 0, 0 ),
                        VerticalAlignment = ch == '_' ? System.Windows.VerticalAlignment.Bottom : System.Windows.VerticalAlignment.Top,
                        FontSize = ch == '|' ? 12 : 8
                    } );
                    tmp = "";
                }
                else
                {
                    tmp += ch;
                }
            }
            return stp;
        }
    }
    public struct ExperimentTableData
    {
        public void SetNumber( int number )
        {
            Number = number;
        }
        public int Number { get; private set; }
        public double? L1 { get; set; }
        public double? L2 { get; set; }
        public double? R { get; set; }
        public double? Rx { get; set; }
        public double? DeltaRx { get; set; }
        public double? sqrDeltaRx { get; set; }
    }

}
